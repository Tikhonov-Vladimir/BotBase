#include <iostream>
#include <chrono>
#include <thread>

#include <opencv2/opencv.hpp>
#include <ViZDoom.h>

using namespace vizdoom;

DoomGame* game = new DoomGame();
const std::vector<double> actions[3] = {
	{ 1, 0, 0 },
	{ 0, 1, 0 },
	{ 0, 0, 1 },
};

void sleep(size_t time) {
	std::this_thread::sleep_for(std::chrono::milliseconds(time));
}

void game_init() {
	game->setViZDoomPath("../vizdoom/vizdoom");
	game->setDoomGamePath("../vizdoom/freedoom2.wad");
	game->loadConfig("../vizdoom/scenarios/task1.cfg");
	game->setLabelsBufferEnabled(1);
	game->setRenderWeapon(1);
	game->setRenderHud(1);
	game->init();
}

CvPoint find(cv::Mat matrix) {
	CvPoint sum = cvPoint(0, 0);
	int counter = 0;
	for (int y = 200; y < 210; y++) {
		for (int x = 30; x < (&matrix)->cols - 30; x++) {
			if (matrix.at<unsigned char>(y, x) == 255) {
				sum.x += x + 10;
				sum.y += y;
				return sum;
			}
		}

	}
	sum.x = sum.x / double(counter);
	sum.y = sum.y / double(counter);
	return sum;
}

void kill(int x) {
	if (x >= 368)
		game->makeAction(actions[1]);
	else if (x <= 284)
		game->makeAction(actions[0]);
	else
		game->makeAction(actions[2]);

}


int main() {
	game_init();

	int height = 640;
	int width = 480;
	auto scr = cv::Mat(480, 640, CV_8UC3);
	auto greyscale = cv::Mat(480, 640, CV_8UC1);
	int res = 0;

	int episodes = 10;
	size_t sleepTime = 2000 / DEFAULT_TICRATE;
	for (int i = 0; i < episodes; ++i) {
		std::cout << "Episode #" << i + 1 << "\n";
		game->newEpisode();
		while (!game->isEpisodeFinished()) {
			auto state = game->getState();
			auto screenBuf = state->screenBuffer;

			std::memcpy(scr.data, state->screenBuffer->data(), state->screenBuffer->size());
			cv::extractChannel(scr, greyscale, 1);
			cv::threshold(greyscale, greyscale, 130, 255, cv::THRESH_BINARY);

			CvPoint w = find(greyscale);
			kill(w.x);

			cvWaitKey(sleepTime);
		}
		sleep(sleepTime * 10);
		std::cout << "Total reward is: " << game->getTotalReward() << std::endl;
		res += game->getTotalReward();
	}
	cvDestroyWindow("original");
	std::cout << double(res) / episodes;
	system("pause >nul");
	game->close();
	delete game;
}